<project name="BusinessObjectsBuild" default="buildAll">
	<property name="build.dir" value="./antBuild" />
	<property name="build.dir.src" value="${build.dir}/src"/>
	<property name="build.dir.tests" value="${build.dir}/test"/>
	<property name="build.dir.stubs" value="${build.dir}/stubs"/>
	<property name="docs.build.dir" value="./doc"/>
	<property name="src.dir" value="./src" />
	<property name="test.dir" value="./test" />
	<property name="stubs.dir" value="./stubs" />
	<property name="integration.test.dir" value="./integrationTest" />
	<property name="acceptance.test.dir" value="./Acceptance Test" />
	<property name="jar.dir" value="./jars" />
	<property name="jar.name.bin" value="BusinessObjects.jar" />
	<property name="jar.name.src" value="BusinessObjects-src.jar" />
	<property name="jar.name.doc" value="BusinessObjects-docs.jar" />
	<property name="lib.dir" value="./lib" />
	<property name="application.lib.bo.dir" value="../EPE2/libs/businessObjects" />
	<property name="application.dir" value="../EPE2/" />
	<property name="epefeature.dir" value="../EPE_Feature" />
	<property name="application.db.dir" value="${application.dir}/DB" />
	<property name="epefeature.db1.dir" value="${epefeature.dir}/Database/DB" />
	<property name="epefeature.db2.dir" value="${epefeature.dir}/Database/EPE2.app/Contents/MacOS/DB" />
	<property name="target" value="1.5" />
	<property name="source" value="1.5" />
	<property name="bo.db.dir" value="DB" />

	<property name="castor.schema.file" value="${src.dir}/org/pathwayeditor/businessobjects/exchange/Canvas.xsd" />
	<property name="castor.build.file" value="schema/CanvasBinding.xml" />
	<property name="castor.properties.file" value="${src.dir}/castorbuilder.properties" />

    <property name="grammar.name" value="DrawingVm.g"/>
    <property name="walker.name" value="TreeDrawingVm.g"/>
    <property name="package" value="org/pathwayeditor/figurevm"/>
    <property name="test.package" value="org/pathwayeditor/figurevm"/>
    <property name="grammar" location="${src.dir}/${package}"/>
	<property name="main.class" value="org.pathwayeditor.figurevm.ParserTest"/>
    <property name="test.package.dir" value="${test.dir}/${test.package}" />
	
    <!-- where to write/find token files -->
    <property name="token.lib" location="${src.dir}/${package}" />
    <!-- antlr options -->
    <property name="profile" value="false" />
    <property name="report" value="true" />
    <property name="multithreaded" value="true" />
    <property name="depend" value="true" />
	<property name="antlr" value="${lib.dir}/antlr-3.1.2/lib"/>

	<path id="classpath">
		<pathelement location="${build.dir.src}" />
		<pathelement location="${lib.dir}/hibernate-3.2/hibernate3.jar" />
		<!--pathelement location="${lib.dir}/hsqldb/lib/hsqldb.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/ant-1.6.5.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/ant-antlr-1.6.5.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/ant-launcher-1.6.5.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/ant-swing-1.6.5.jar" /-->
		<pathelement location="${lib.dir}/hibernate-3.2/lib/antlr-2.7.6.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/asm.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/asm-attrs.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/c3p0-0.9.1.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/checkstyle-all.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/cleanimports.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/commons-collections-2.1.1.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/commons-logging-1.0.4.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/concurrent-1.3.2.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/dom4j-1.6.1.jar" />
		<!--pathelement location="${lib.dir}/hibernate-3.2/lib/ehcache-1.2.3.jar" /-->
		<pathelement location="${lib.dir}/hibernate-3.2/lib/jaas.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/jacc-1_0-fr.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/javassist.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/jaxen-1.1-beta-7.jar" />
		<!--pathelement location="${lib.dir}/hibernate-3.2/lib/jboss-cache.jar" /-->
		<pathelement location="${lib.dir}/hibernate-3.2/lib/jboss-common.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/jboss-jmx.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/jboss-system.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/jgroups-2.2.8.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/jta.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/oscache-2.1.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/proxool-0.8.3.jar" />
		<!--pathelement location="${lib.dir}/hibernate-3.2/lib/swarmcache-1.0rc2.jar" /-->
		<pathelement location="${lib.dir}/hibernate-3.2/lib/syndiag2.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/versioncheck.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/xml-apis.jar" />
		<pathelement location="${lib.dir}/slf4j-1.5.2/slf4j-api-1.5.2.jar" />
		<pathelement location="${lib.dir}/slf4j-1.5.2/slf4j-log4j12-1.5.2.jar" />
		<pathelement location="${lib.dir}/apache-log4j-1.2.15/log4j-1.2.15.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/xerces-2.6.2.jar" />
		<pathelement location="${lib.dir}/hsqldb/lib/hsqldb.jar" />
		<pathelement location="${lib.dir}/compoundgraph/CompoundGraph.jar" />
		<pathelement location="${lib.dir}/antlr-3.1.2/lib/antlr-2.7.7.jar"/>
		<pathelement location="${lib.dir}/antlr-3.1.2/lib/antlr-3.1.2.jar" />
		<pathelement location="${lib.dir}/antlr-3.1.2/lib/stringtemplate-3.2.jar" />
		<pathelement location="${lib.dir}/antlr-3.1.2/lib/runtime-3.1.2.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3-codegen.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3-xml-schema.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3-core.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3-anttasks.jar" />
		<pathelement location="${lib.dir}/castor-1.3/lib/cglib-full-2.0.2.jar" />
		<pathelement location="${lib.dir}/castor-1.3/lib/commons-collections-3.1.jar" />
		<pathelement location="${lib.dir}/castor-1.3/lib/commons-lang-2.1.jar" />
		<pathelement location="${lib.dir}/castor-1.3/lib/commons-logging-1.1.jar" />
	</path>

	<path id="test.classpath">
		<path refid="classpath" />
		<pathelement location="${lib.dir}/jmock-2.5.1/bsh-core-2.0b4.jar" />
		<pathelement location="${lib.dir}/jmock-2.5.1/cglib-nodep-2.1_3.jar" />
		<pathelement location="${lib.dir}/jmock-2.5.1/hamcrest-core-1.1.jar" />
		<pathelement location="${lib.dir}/jmock-2.5.1/hamcrest-library-1.1.jar" />
		<pathelement location="${lib.dir}/junit4.4/junit-4.4.jar" />
		<pathelement location="${lib.dir}/jmock-2.5.1/jmock-2.5.1.jar" />
		<pathelement location="${lib.dir}/jmock-2.5.1/jmock-junit4-2.5.1.jar" />
		<pathelement location="${lib.dir}/jmock-2.5.1/jmock-legacy-2.5.1.jar" />
		<pathelement location="${lib.dir}/jmock-2.5.1/jmock-script-2.5.1.jar" />
		<pathelement location="${lib.dir}/jmock-2.5.1/objenesis-1.0.jar" />
		<pathelement location="${lib.dir}/DbUnit/dbunit-2.3.0.jar" />
		<pathelement location="${lib.dir}/hsqldb/lib/hsqldb.jar" />
		<pathelement location="${lib.dir}/dbunit-2.4.5/dbunit-2.4.5.jar" />
		<pathelement location="${lib.dir}/easymock-2.5.2/easymock-2.5.2.jar" />
		<pathelement location="${lib.dir}/poi-3.2-FINAL/poi-3.2-FINAL-20081019.jar" />
		<pathelement location="${build.dir.src}" />
		<pathelement location="${build.dir.tests}" />
		<pathelement location="${build.dir.stubs}" />
	</path>


	<target name="init" depends="" description="--> Creates the directories used in the build">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir.src}" />
		<mkdir dir="${build.dir.tests}" />
		<mkdir dir="${build.dir.stubs}" />
	</target>

	<target name="clean" description="Cleanup the jars, classes and generated source" depends="cleanup-castor-code">
		<delete dir="${build.dir}"  includeemptydirs="true">
	       	  <fileset dir="${src.dir}/${package}" includes="TreeDrawingVm.java"/> 
	       	  <fileset dir="${src.dir}/${package}" includes="DrawingVmLexer.java"/> 
	       	  <fileset dir="${src.dir}/${package}" includes="DrawingVmParser.java"/> 
	          <fileset dir="${src.dir}" 
	                includes="**/*.class,**/*.tokens" />
		</delete>
	</target>

	<target name="buildAll" description="main build task" depends="buildSrc, api-docs, jarAll" />

	<target name="buildStubs" description="build task" depends="buildSrc">
		<javac source="${source}" target="${target}" classpathref="test.classpath" srcdir="${stubs.dir}" debug="true" debuglevel="lines,vars,source" destdir="${build.dir.stubs}">
		</javac>
		<copy todir="${build.dir.stubs}">
			<fileset dir="${stubs.dir}">
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<target name="buildTest" description="test build task" depends="buildSrc,buildStubs">
		<javac source="${source}" target="${target}" classpathref="test.classpath" srcdir="${test.dir}" debug="true" debuglevel="lines,vars,source" destdir="${build.dir.tests}">
		</javac>
		<copy todir="${build.dir.tests}">
			<fileset dir="${test.dir}">
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<target name="buildIntegrationTest" description="test integration build task" depends="buildSrc,buildStubs">
		<javac source="${source}" target="${target}" classpathref="test.classpath" srcdir="${integration.test.dir}" debug="true" debuglevel="lines,vars,source" destdir="${build.dir.tests}">
		</javac>
		<copy todir="${build.dir.tests}">
			<fileset dir="${integration.test.dir}">
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<target name="buildAcceptanceTest" description="acceptance test build task" depends="buildSrc,buildStubs">
		<javac source="${source}" target="${target}" classpathref="test.classpath" srcdir="${acceptance.test.dir}" debug="true" debuglevel="lines,vars,source" destdir="${build.dir.tests}">
		</javac>
		<copy todir="${build.dir.tests}">
			<fileset dir="${acceptance.test.dir}">
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
			</fileset>
		</copy>
	</target>

    <macrodef name="antlr3">
       <attribute name="grammar.name"/>
       <attribute name="package" default="${package}"/>
       <attribute name="debugFlag" default="no"/>
       <sequential>
              <echo message="antlr ${grammar}/@{grammar.name}" />
              <antlr:antlr3 xmlns:antlr="antlib:org/apache/tools/ant/antlr" 
                  target="${grammar}/@{grammar.name}" 
                  outputdirectory="${src.dir}/@{package}"
                  libdirectory="${src.dir}/@{package}"
                  multithreaded="${multithreaded}"
                  report="${report}"
              	  debug="@{debugFlag}"
                  profile="${profile}">
              	<classpath refid="classpath"/>
              </antlr:antlr3>
        </sequential>
    </macrodef>
    
    <target name="grammar" depends="init">
       <antlr3 grammar.name="${grammar.name}"/>
    </target>
    
    <target name="walker" depends="init">
       <antlr3 grammar.name="${walker.name}" debugFlag="no" />
    </target>

	<target name="buildSrc" description="src build task" depends="init,grammar,walker,castor-gen">
		<!-- <echo>running with classpath ${toString:classpath}</echo>-->
		<javac classpathref="classpath" srcdir="${src.dir}" source="${source}" target="${target}" debug="true" debuglevel="lines,vars,source" destdir="${build.dir.src}">
		</javac>
		<copy todir="${build.dir.src}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
				<exclude name="**/*.txt" />
			</fileset>
		</copy>
	</target>

	<target name="api-docs" depends="buildSrc">
		<javadoc access="package" author="true" splitindex="true" use="true" version="true" source="1.5" sourcepath="${src.dir}" destdir="${docs.build.dir}" doctitle="Business Objects API" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false">
			<classpath refid="classpath" />
		</javadoc>
	</target>

	<target name="tests" description="Run all tests" depends="buildTest, buildIntegrationTest, buildAcceptanceTest">
		<delete dir="${build.dir}/test/logs" />
		<mkdir dir="${build.dir}/test/logs" />
		<!-- <echo>running with classpath ${toString:test.classpath}</echo>-->
		<!--
			run test cases. All test class names should end in 'Test' to avoid
			inclusion of inner classes.
		-->
		<junit printsummary="yes" haltonfailure="no" fork="yes" forkmode="perBatch" maxmemory="512m">
			<classpath>
				<path refid="test.classpath" />
			</classpath>
			<batchtest todir="${build.dir}/test/logs">
				<formatter type="xml" />
				<fileset dir="${build.dir.tests}">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>

		<!-- clean report directory -->
		<delete dir="${build.dir}/test/junitReports" />
		<mkdir dir="${build.dir}/test/junitReports" />

		<!-- generate report -->
		<junitreport todir="${build.dir}/test/junitReports">
			<fileset dir="${build.dir}/test/logs" includes="**/*.xml" />
			<report todir="${build.dir}/test/junitReports" />
		</junitreport>
	</target>

	<target name="jarAll" depends="jar-bin, jar-src, jar-docs"/>
	
	<target name="init-jardirs">
		<delete dir="${jar.dir}" />
		<mkdir dir="${jar.dir}" />
	</target>
	
	<target name="jar-bin" depends="buildSrc, init-jardirs">
		<jar destfile="${jar.dir}/${jar.name.bin}">
			<fileset dir="${build.dir.src}" />
		</jar>
	</target>
	
	<target name="jar-src" depends="init-jardirs">
		<jar destfile="${jar.dir}/${jar.name.src}">
			<fileset dir="${src.dir}" />
		</jar>
	</target>
	
	<target name="jar-docs" depends="api-docs">
		<mkdir dir="${jar.dir}" />
		<jar destfile="${jar.dir}/${jar.name.doc}">
			<fileset dir="${docs.build.dir}" />
		</jar>
	</target>
				
	<target name="jar-and-export" depends="jarAll">
		<copy todir="${application.lib.bo.dir}">
			<fileset dir="${jar.dir}" />
		</copy>
	</target>
	
	<target name="build-database">
		<java classname="org.pathwayeditor.businessobjects.database.util.InitialisedDefaultDB" fork="true" failonerror="true">
			<classpath>
				<pathelement location="${build.dir.src}" />
				<path refid="classpath" />
			</classpath>
		</java>
	</target>
	
	<!-- ================================= 
          target: name              
         ================================= -->
    <target name="xmlschema-code" depends="cleanup-castor-code,castor-gen" description="Generate xmlschema handling code">
    </target>

	
	<target name="cleanup-castor-code">
		<delete includeemptydirs="true">
			<fileset dir="${src.dir}">
			    <include name="org/pathwayeditor/businessobjects/exchange/castor/**/*"/>
			    <include name="org/pathwayeditor/businessobjects/exchange/castor"/>
			</fileset>
		</delete>
	</target>
	
	<path id="castor.class.path">
		<pathelement location="schema" />
		<pathelement location="${lib.dir}/apache-log4j-1.2.15/log4j-1.2.15.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3-codegen.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3-xml-schema.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3-core.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3.jar" />
		<pathelement location="${lib.dir}/castor-1.3/castor-1.3-anttasks.jar" />
		<pathelement location="${lib.dir}/castor-1.3/lib/cglib-full-2.0.2.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/commons-collections-2.1.1.jar" />
		<pathelement location="${lib.dir}/hibernate-3.2/lib/commons-logging-1.0.4.jar" />
	</path>
		
	<target name="castor-gen" depends="init,cleanup-castor-code"
	         description="Generate Java source files from XSD.">

		<taskdef name="castor-srcgen"
	             classname="org.castor.anttask.CastorCodeGenTask"
	             classpathref="castor.class.path" />
	    <castor-srcgen file="${castor.schema.file}"
	                   todir="src"
	                   package="org.pathwayeditor.businessobjects.exchange.castor"
	                   types="j2"
	    			   verbose="false"
	    			   nodesc="false"
	                   warnings="false"
	    			   bindingfile="${castor.build.file}"
	    			   properties="${castor.properties.file}"
	    			   nameConflictStrategy="informViaLog"
	    />
	</target>
	
</project>
