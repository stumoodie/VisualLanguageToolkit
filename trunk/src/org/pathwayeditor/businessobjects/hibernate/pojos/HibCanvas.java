package org.pathwayeditor.businessobjects.hibernate.pojos;

import java.io.Serializable;
import java.util.Date;

import org.pathwayeditor.businessobjects.contextadapter.IContext;
import org.pathwayeditor.businessobjects.drawingprimitives.ICanvas;
import org.pathwayeditor.businessobjects.drawingprimitives.attributes.RGB;
import org.pathwayeditor.businessobjects.drawingprimitives.attributes.Size;
import org.pathwayeditor.businessobjects.repository.IMap;

import uk.ed.inf.graph.util.IndexCounter;

/**
 * Canvas generated by hbm2java
 */
public class HibCanvas implements ICanvas , Serializable {
	private static final long serialVersionUID = 807306412269098190L;

	private Long id;
	private HibMapDiagram mapDiagram;
	private HibContext hibContext;
	private IContext context;
	private Size gridSize;
	private boolean gridEnabled;
	private boolean snapToGridEnabled;
	private RGB backgroundColour;
	private Size canvasSize;
	private Date created = null ;
	private Date modified = null ;
	private int mapINode;
	private HibRepository repository ;
	private HibModel graph ;
	private IndexCounter creationSerialCounter;

	/**
	 * Default constructor used by hibernate.
	 */
	public HibCanvas() {
	}

	/**
	 * Constructor to be used by BO facade. This creates a canvas that is owned by a map.
	 * @param mapDiagram
	 * @param context
	 */
	public HibCanvas(HibMapDiagram mapDiagram, IContext context) {
		this.mapDiagram = mapDiagram;
		this.context = context;
		this.hibContext = null; //FIXME: sort out CA hib mappings
	}
	
	public HibCanvas(HibMapDiagram newMap, HibCanvas other) {
		this.mapDiagram = newMap;
		this.hibContext = other.hibContext;
		this.gridSize = other.getGridSize();
		this.gridEnabled = other.gridEnabled;
		this.snapToGridEnabled = other.snapToGridEnabled;
		this.backgroundColour = other.getBackgroundColour();
		this.canvasSize = other.getCanvasSize();
		this.repository = other.repository ;
		this.graph = new HibModel(this, other.getGraph());
		this.created = new Date();
		this.modified= new Date();
		
		
	}

	public Long getId() {
		return this.id;
	}

	@SuppressWarnings("unused")
	private void setId(Long id) {
		this.id = id;
	}

	public HibMapDiagram getMapDiagram() {
		return this.mapDiagram;
	}

	public void setMapDiagram(HibMapDiagram hibMapDiagram) {
		this.mapDiagram = hibMapDiagram;
	}

	public IContext getContext() {
		return this.context;
	}

	public void setContext(HibContext hibContext) {
		this.hibContext = hibContext;
	}
	
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	public Date getModified() {
		return this.modified;
	}

	public void setModified(Date modified) {
		this.modified = modified;
	}

	int getGridX() {
		return this.gridSize.getWidth();
	}

	void setGridX(int gridX) {
		this.gridSize = this.gridSize.newWidth(gridX);
	}

	int getGridY() {
		return this.gridSize.getHeight();
	}

	void setGridY(int gridY) {
		this.gridSize = this.gridSize.newHeight(gridY);
	}

	public Size getGridSize() {
		return this.gridSize;
	}

	public void setGridSize(Size newGridSize){
		this.gridSize = newGridSize;
	}
	
	public boolean isGridEnabled() {
		return this.gridEnabled;
	}

	public void setGridEnabled(boolean gridEnabled) {
		this.gridEnabled = gridEnabled;
	}

	public boolean isSnapToGridEnabled() {
		return this.snapToGridEnabled;
	}

	public void setSnapToGridEnabled(boolean snapToGridEnabled) {
		this.snapToGridEnabled = snapToGridEnabled;
	}

	public int getBackgroundRed() {
		return this.backgroundColour.getRed();
	}

	public void setBackgroundRed(int backgroundRed) {
		this.backgroundColour = this.backgroundColour.newRed(backgroundRed);
	}

	public int getBackgroundGreen() {
		return this.backgroundColour.getGreen();
	}

	public void setBackgroundGreen(int backgroundGreen) {
		this.backgroundColour = this.backgroundColour.newGreen(backgroundGreen);
	}

	public int getBackgroundBlue() {
		return this.backgroundColour.getBlue();
	}

	public void setBackgroundBlue(int backgroundBlue) {
		this.backgroundColour = this.backgroundColour.newBlue(backgroundBlue);
	}

	public int getCanvasWidth() {
		return this.canvasSize.getWidth();
	}

	public void setCanvasWidth(int canvasWidth) {
		this.canvasSize = this.canvasSize.newWidth(canvasWidth);
	}

	public int getCanvasHeight() {
		return this.canvasSize.getHeight();
	}

	public void setCanvasHeight(int canvasHeight) {
		this.canvasSize = this.canvasSize.newHeight(canvasHeight);
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof HibCanvas))
			return false;
		HibCanvas castOther = (HibCanvas) other;

		return ((this.getMapDiagram() == castOther.getMapDiagram()) || (this
				.getMapDiagram() != null
				&& castOther.getMapDiagram() != null && this.getMapDiagram()
				.equals(castOther.getMapDiagram())));
	}

	public int hashCode() {
		int result = 17;
		result = 37
				* result
				+ (getMapDiagram() == null ? 0 : this.getMapDiagram()
						.hashCode());

		return result;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getBackgroundColour()
	 */
	public RGB getBackgroundColour() {
		return this.backgroundColour;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getMap()
	 */
	public IMap getOwningMap() {
		return this.getMapDiagram() ;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#isSnapToGridOn()
	 */
	public boolean isSnapToGridOn() {
		return this.gridEnabled;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#setBackgroundColour(org.pathwayeditor.businessobjects.drawingprimitives.attributes.RGB)
	 */
	public void setBackgroundColour(RGB backgroundColour) {
		if ( backgroundColour == null)
			throw new IllegalArgumentException ( "BackgroundColor cannot be null") ;

		this.backgroundColour = backgroundColour;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#setSnapToGrid(boolean)
	 */
	public void setSnapToGrid(boolean snapToGridStatus) {
		this.gridEnabled = snapToGridStatus ;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getMapSize()
	 */
	public Size getCanvasSize() {
		return this.canvasSize;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#setMapSize(org.pathwayeditor.businessobjects.drawingprimitives.attributes.Size)
	 */
	public void setCanvasSize(Size size) {
		if (size == null)
			throw new IllegalArgumentException () ;
		
		this.canvasSize = size;
	}

	public int getMapINode() {
		return this.mapINode;
	}

	public void setMapINode(int mapINode) {
		this.mapINode = mapINode;
	}

	public HibRepository getRepository() {
		return this.repository;
	}

	public void setRepository(HibRepository repository) {
		this.repository = repository;
	}

	public HibModel getGraph() {
		return this.graph;
	}

	public void setGraph(HibModel graph) {
		this.graph = graph;
	}

	
	void setLastIndexValue(int lastIndexValue){
		this.creationSerialCounter = new IndexCounter(lastIndexValue);
	}
	
	int getLastIndexValue(){
		return this.creationSerialCounter.getLastIndex();
	}
	
	public IndexCounter getAttributeSerialCounter(){
		return this.creationSerialCounter;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#createCopy(org.pathwayeditor.businessobjects.repository.IMap)
	 */
	public ICanvas createCopy(IMap map) {
		return new HibCanvas((HibMapDiagram)map, this);
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getModel()
	 */
	public HibModel getModel() {
		return this.graph;
	}
}
