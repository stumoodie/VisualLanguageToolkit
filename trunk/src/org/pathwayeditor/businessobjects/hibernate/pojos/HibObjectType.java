package org.pathwayeditor.businessobjects.hibernate.pojos;

import java.io.Serializable;

/**
 * ObjectType generated by hbm2java
 */
public class HibObjectType implements Serializable {
	private static final long serialVersionUID = -1860135213188225684L;

	private Long id;
	private HibNotation hibNotation;
	private String name;
	private String description;

	/**
	 * Default constructor that should only be used by hibernate.
	 * @deprecated should not be used by hibernate code, use one of the other constructors. 
	 */
	HibObjectType() {
	}

	public HibObjectType(HibNotation hibNotation, String name,
			String description) {
		this.hibNotation = hibNotation;
		this.name = name;
		this.description = description;
	}

	public Long getId() {
		return this.id;
	}

	@SuppressWarnings("unused")
	private void setId(Long id) {
		this.id = id;
	}

	public HibNotation getNotation() {
		return this.hibNotation;
	}

	public void setNotation(HibNotation hibNotation) {
		this.hibNotation = hibNotation;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof HibObjectType))
			return false;
		HibObjectType castOther = (HibObjectType) other;

		return ((this.getNotation() == castOther.getNotation()) || (this
				.getNotation() != null
				&& castOther.getNotation() != null && this.getNotation().equals(
				castOther.getNotation())))
				&& ((this.getName() == castOther.getName()) || (this.getName() != null
						&& castOther.getName() != null && this.getName()
						.equals(castOther.getName())));
	}

	public int hashCode() {
		int result = 17;

		result = 37 * result
				+ (getNotation() == null ? 0 : this.getNotation().hashCode());
		result = 37 * result
				+ (getName() == null ? 0 : this.getName().hashCode());

		return result;
	}

	public void changeContext(HibNotation newContext) {
		HibNotation oldContext = this.hibNotation;
		this.hibNotation = newContext;
		if (oldContext != null) {
			oldContext.getObjectTypes().remove(this);
		}
		if (this.hibNotation != null) {
			this.hibNotation.getObjectTypes().add(this);
		}
	}

}
