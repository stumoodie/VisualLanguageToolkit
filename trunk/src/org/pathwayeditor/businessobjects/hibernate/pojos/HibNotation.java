package org.pathwayeditor.businessobjects.hibernate.pojos;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import org.pathwayeditor.businessobjects.drawingprimitives.attributes.Version;

/**
 * Context generated by hbm2java
 */
public class HibNotation implements Serializable {
	private static final long serialVersionUID = 6061237727249348954L;

	private Long id;
	private String globalId;
	private String name;
	private String description;
	private Version version; 
	private Set<HibObjectType> hibObjectTypes = new HashSet<HibObjectType>(0);

	/**
	 * This constructor should only be used by hibernate.
	 * @deprecated Use another constructor. This constructor should not be used by application code.
	 */
	HibNotation() {
	}

	/**
	 * Construct a new hibernate notation description.
	 * @param name
	 * @param description
	 */
	public HibNotation(String globalId, String name, String description, Version version) {
		this.globalId = globalId;
		this.name = name;
		this.description = description;
		this.version = version;
	}

	public Long getId() {
		return this.id;
	}

	@SuppressWarnings("unused")
	private void setId(Long id) {
		this.id = id;
	}

	public String getGlobalId() {
		return this.globalId;
	}

	public void setGlobalId(String globalId) {
		this.globalId = globalId;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getMajorVersion() {
		return this.version.getMajorVersion();
	}

	public void setMajorVersion(int majorVersion) {
		this.version = this.version.newMajorVersion(majorVersion);
	}

	public int getMinorVersion() {
		return this.version.getMinorVersion();
	}

	public void setMinorVersion(int minorVersion) {
		this.version = version.newMinorVersion(minorVersion);
	}

	public int getPatchVersion() {
		return this.version.getPatchVersion();
	}

	public void setPatchVersion(int patchVersion) {
		this.version = this.version.newPatchVersion(patchVersion);
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	Set<HibObjectType> getObjectTypes() {
		return this.hibObjectTypes;
	}

	void setObjectTypes(Set<HibObjectType> hibObjectTypes) {
		this.hibObjectTypes = hibObjectTypes;
	}

	void addObjectType(HibObjectType newObjectType) {
		if (newObjectType == null)
			throw new IllegalArgumentException("newObjectType cannot be null");

		HibNotation oldContext = (HibNotation) newObjectType.getNotation();
		if (oldContext != null) {
			oldContext.hibObjectTypes.remove(newObjectType);
		}
		this.hibObjectTypes.add(newObjectType);
		newObjectType.setNotation(this);
	}

	void removeobjectType(HibObjectType hibObjectType) {
		if (hibObjectType == null)
			throw new IllegalArgumentException("objectType cannot be null");
		if (hibObjectType.getNotation() != this)
			throw new IllegalArgumentException(
					"objectType must be a child of this folder");

		this.hibObjectTypes.remove(hibObjectType);
		hibObjectType.setNotation(null);
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof HibNotation))
			return false;
		HibNotation castOther = (HibNotation) other;

		return ((this.getGlobalId() == castOther.getGlobalId()) || (this
				.getGlobalId() != null
				&& castOther.getGlobalId() != null && this.getGlobalId()
				.equals(castOther.getGlobalId())));
	}

	public int hashCode() {
		int result = 17;

		result = 37 * result
				+ (getGlobalId() == null ? 0 : this.getGlobalId().hashCode());

		return result;
	}
	
	public String toString(){
		StringBuilder builder = new StringBuilder(this.getClass().getSimpleName());
		builder.append("[globalId=");
		builder.append(this.globalId);
		builder.append(", name=");
		builder.append(this.name);
		builder.append(", version=");
		builder.append(version);
		builder.append("]");
		return builder.toString();
	}
}
