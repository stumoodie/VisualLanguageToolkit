/*
  Licensed to the Court of the University of Edinburgh (UofE) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The UofE licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
*/

package org.pathwayeditor.figure.definition;


/**
 * 
 * Value is a class that defines a compiled value generated by the figure definition compiler, which is used by an {@link Instruction}.
 * The value has a type and a an actual value of that type. <code>Value</code> is immutable so can be passed by reference without
 * breaking encapsulation.
 *
 * @author Stuart Moodie
 *
 */
public final class Value {
	public static final Value NULL = new Value();
	
	private final Object value;
	private final ValueType type;
	
	public static Value createStringLiteral(String value){
		return new Value(ValueType.STRING_LITERAL, value);
	}
	
	public static Value createLiteralVariableName(String value){
		return new Value(ValueType.LITERAL_VAR_NAME, value);
	}
	
	public Value(){
		this.type = ValueType.NULL;
		this.value = null;
	}
	
	public Value(ValueType type, String stringValue){
		this.type = type;
		this.value = stringValue;
	}
	
	public Value(Integer value){
		this.type = ValueType.INTEGER;
		this.value = value;
	}
	
	public Value(Boolean value){
		this.type = ValueType.BOOLEAN;
		this.value = value;
	}
	
	public Value(Double value){
		this.type = ValueType.REAL;
		this.value = value;
	}
	
	public Value(ICompiledFigureDefinition value){
		this.type = ValueType.PROCEDURE;
		this.value = value;
	}
	
	public Value(ValueList value){
		this.type = ValueType.ARRAY;
		this.value = value;
	}
	
	public Value(Value otherVal){
		this.type = otherVal.type;
		// all other types are immutable so straight copy will do
		this.value = otherVal.value;
	}
	
	public ValueType getType(){
		return this.type;
	}
	
	public Object getValue(){
		return this.value;
	}
	
	public Integer getInteger(){
		return (Integer)this.value;
	}
	
	public Double getDouble(){
		Object popVal = this.value;
		Double retVal = null;
		if(popVal instanceof Integer){
			retVal = ((Integer)popVal).doubleValue();
		}
		else{
			retVal = (Double)popVal;
		}
		return retVal;
	}
	
	public Boolean getBoolean(){
		return (Boolean)this.value;
	}
	
	public String getStringLiteral(){
		return (String)this.value;
	}
	
	public String getLiteralVariableName(){
		return (String)this.value;
	}
	
	public ValueList getArray(){
		return (ValueList)this.value;
	}
	
	public ICompiledFigureDefinition getPackedArray(){
		return (ICompiledFigureDefinition)this.value;
	}
	
	public boolean isNull(){
		return this.value == null;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((value == null) ? 0 : value.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof Value))
			return false;
		Value other = (Value) obj;
		if (value == null) {
			if (other.value != null)
				return false;
		} else if (!value.equals(other.value))
			return false;
		return true;
	}
	
	@Override
	public String toString(){
		StringBuilder buf = new StringBuilder(this.getClass().getSimpleName());
		buf.append("(type=");
		buf.append(this.type);
		buf.append(", value=");
		buf.append(this.value);
		buf.append(")");
		return buf.toString();
	}
}
