package org.pathwayeditor.businessobjects.hibernate.pojos;
// Generated 07-May-2008 22:43:44 by Hibernate Tools 3.2.1.GA


import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * Context generated by hbm2java
 */
public class HibContext  implements Serializable {


     private Long id;
     private String globalId;
     private String name;
     private int majorVersion;
     private int minorVersion;
     private int patchVersion;
     private String description;
     private Set<HibObjectType> hibObjectTypes = new HashSet<HibObjectType>(0);

    public HibContext() {
    }

	
    public HibContext(String globalId, String name, int majorVersion, int minorVersion, int patchVersion, String description) {
        this.globalId = globalId;
        this.name = name;
        this.majorVersion = majorVersion;
        this.minorVersion = minorVersion;
        this.patchVersion = patchVersion;
        this.description = description;
    }
    public HibContext(String globalId, String name, int majorVersion, int minorVersion, int patchVersion, String description, Set<HibObjectType> hibObjectTypes) {
       this.globalId = globalId;
       this.name = name;
       this.majorVersion = majorVersion;
       this.minorVersion = minorVersion;
       this.patchVersion = patchVersion;
       this.description = description;
       this.hibObjectTypes = hibObjectTypes;
    }
   
    public Long getId() {
        return this.id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    public String getGlobalId() {
        return this.globalId;
    }
    
    public void setGlobalId(String globalId) {
        this.globalId = globalId;
    }
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    public int getMajorVersion() {
        return this.majorVersion;
    }
    
    public void setMajorVersion(int majorVersion) {
        this.majorVersion = majorVersion;
    }
    public int getMinorVersion() {
        return this.minorVersion;
    }
    
    public void setMinorVersion(int minorVersion) {
        this.minorVersion = minorVersion;
    }
    public int getPatchVersion() {
        return this.patchVersion;
    }
    
    public void setPatchVersion(int patchVersion) {
        this.patchVersion = patchVersion;
    }
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    public Set<HibObjectType> getObjectTypes() {
        return this.hibObjectTypes;
    }
    
    public void setObjectTypes(Set<HibObjectType> hibObjectTypes) {
        this.hibObjectTypes = hibObjectTypes;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof HibContext) ) return false;
		 HibContext castOther = ( HibContext ) other; 
         
		 return ( (this.getGlobalId()==castOther.getGlobalId()) || ( this.getGlobalId()!=null && castOther.getGlobalId()!=null && this.getGlobalId().equals(castOther.getGlobalId()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         
         result = 37 * result + ( getGlobalId() == null ? 0 : this.getGlobalId().hashCode() );
         
         
         
         
         
         
         return result;
   }   

  // The following is extra code specified in the hbm.xml files

	private static final long serialVersionUID = 6061237727249348954L;
     void addObjectType(HibObjectType newObjectType){
    	 if(newObjectType == null) throw new IllegalArgumentException("newObjectType cannot be null");
    	 
    	 HibContext oldContext = newObjectType.getContext();
    	 if(oldContext != null){
    		 oldContext.hibObjectTypes.remove(newObjectType);
    	 }
    	 this.hibObjectTypes.add(newObjectType);
    	 newObjectType.setContext(this);
     }
    	
     void removeobjectType(HibObjectType hibObjectType){
    	 if(hibObjectType == null) throw new IllegalArgumentException("objectType cannot be null");
    	 if(hibObjectType.getContext() != this) throw new IllegalArgumentException("objectType must be a child of this folder");
    	 
    	 this.hibObjectTypes.remove(hibObjectType);
    	 hibObjectType.setContext(null);
     }
  // end of extra code specified in the hbm.xml files

}


