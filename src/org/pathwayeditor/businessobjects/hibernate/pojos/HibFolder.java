package org.pathwayeditor.businessobjects.hibernate.pojos;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.UUID;

import org.hibernate.Session;
import org.pathwayeditor.businessobjects.database.util.HibernateUtil;
import org.pathwayeditor.businessobjects.repository.IFolder;
import org.pathwayeditor.businessobjects.repository.IMap;
import org.pathwayeditor.businessobjects.repository.ISubFolder;

/**
 * Folder generated by hbm2java
 */
public abstract class HibFolder implements Serializable, IFolder {
	private static final long serialVersionUID = 8668639813872187460L;
	public static final String ILLEGAL_SUBFOLDERNAME = "Subfolder names must be unique and cannot be null or contain a slashdot";
	public static final String ILLEGAL_SUBFOLDER = "Subfolder cannot be added";
	public static final String NOT_CHILD = "Subfolder not child of this folder";
	public static final String ILLEGAL_MAPNAME = "Map names must be unique and cannot be null or contain a slashdot";
	public static final String MAP_ALREADY_EXISTS = "Map already existed in the folder.";
	private Long id;
	private Set<HibMapDiagram> hibMapDiagrams = new HashSet<HibMapDiagram>(0);
	private Set<HibSubFolder> subFolders = new HashSet<HibSubFolder>(0);
	private HibRepository repository;
	private int iNode = makeIntUUID();

	public HibFolder() {
	}

	private Session getSession() {
		Session sess = HibernateUtil.getSessionFactory().openSession();
		sess.beginTransaction();
		return sess;
	}

	/**
	 * @param sess
	 */
	private void commitSession(Session sess) {
		sess.saveOrUpdate(this);
		HibernateUtil.commitAndCloseSession(sess);
	}

	/**
	 * @return a int representation of the first 8 digits in a real UUID
	 */
	private int makeIntUUID() { // FIXME - this IS NOT GUARANTEED
		// UNIQUE!!!!!!!!!!!!!
		Long tempL = UUID.randomUUID().getMostSignificantBits();
		return tempL.intValue();
	}

	public HibFolder(HibFolder other) {
		for (HibMapDiagram diagram : other.getMapDiagrams()) {
			this.hibMapDiagrams.add(new HibMapDiagram(this, diagram));
		}
		for (HibSubFolder subFolder : other.getSubFolders()) {
			this.subFolders.add(new HibSubFolder(this, subFolder));
		}
	}

	public Long getId() {
		return this.id;
	}

	void setId(Long id) {
		this.id = id;
	}

	public void setRepository(HibRepository repository) {
		this.repository = repository;
	}

	public HibRepository getRepository() {
		return repository;
	}

	public Set<HibMapDiagram> getMapDiagrams() {
		return this.hibMapDiagrams;
	}

	void setMapDiagrams(Set<HibMapDiagram> hibMapDiagrams) {
		this.hibMapDiagrams = hibMapDiagrams;
	}

	public Set<HibSubFolder> getSubFolders() {
		return this.subFolders;
	}

	void setSubFolders(Set<HibSubFolder> subFolders) {
		this.subFolders = subFolders;
	}

	/**
	 * toString
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@").append(
				Integer.toHexString(hashCode())).append(" [");
		buffer.append("id").append("='").append(getId()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	void addSubFolder(HibSubFolder newSubFolder) {
		if (newSubFolder == null)
			throw new IllegalArgumentException("newSubFolder cannot be null");

		HibFolder oldParentFolder = newSubFolder.getParentFolder();
		if (oldParentFolder != null) {
			oldParentFolder.subFolders.remove(newSubFolder);
			// oldParentFolder.removeHibSubFolder(newSubFolder); FIX ME
		}
		this.subFolders.add(newSubFolder);
		newSubFolder.setParentFolder(this);
		newSubFolder.setRepository(getRepository());
	}

	void removeHibSubFolder(HibSubFolder subFolder) {
		if (subFolder == null)
			throw new IllegalArgumentException("subFolder cannot be null");
		if (subFolder.getParentFolder() != this)
			throw new IllegalArgumentException(
					"subFolder must be a child of this folder");

		this.subFolders.remove(subFolder);
		subFolder.setParentFolder(null);
	}

	void addMapDiagram(HibMapDiagram newMapDiagram) {
		if (newMapDiagram == null)
			throw new IllegalArgumentException("newMapDiagram cannot be null");

		HibFolder oldParentFolder = newMapDiagram.getFolder();
		if (oldParentFolder != null) {
			oldParentFolder.getMapDiagrams().remove(newMapDiagram);
		}
		this.hibMapDiagrams.add(newMapDiagram);
		newMapDiagram.setFolder(this);
	}

	void removeMapDiagram(HibMapDiagram mapDiagram) {
		if (mapDiagram == null)
			throw new IllegalArgumentException("mapDiagram cannot be null");
		if (mapDiagram.getFolder() != this)
			throw new IllegalArgumentException(
					"mapDiagram must belong to this folder");

		this.hibMapDiagrams.remove(mapDiagram);
		mapDiagram.setFolder(null);
	}

	public IFolder getBusinessObject() {
		return this;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof HibFolder)) {
			return false;
		}
		final HibFolder other = (HibFolder) obj;
		if (iNode == other.getINode())
			return true;
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return 31 + iNode;
	}

	public int getINode() {
		return this.iNode;
	}

	protected void setINode(int node) {
		this.iNode = node;
	}

	// /////////////////////////BUSINESS LOGIC
	// METHODS/////////////////////////////////////////////
	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#canMoveSubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder)
	 */
	public boolean canMoveSubfolder(ISubFolder subFolder) {
		boolean folderCanBeMoved = false;
		if (subFolder == null)
			return folderCanBeMoved;
		Session sess = getSession();
		sess.load(this, id);
		sess.load(subFolder, ((HibSubFolder) subFolder).getId());
		if (!testeeChildOf(this, subFolder)
				&& canUseSubfolderName(subFolder.getName()))
			folderCanBeMoved = true;
		sess.close();
		return folderCanBeMoved;
	}

	/**
	 * @param testee
	 *            folder which may be a child
	 * @param testFolder
	 *            folder which may be a parent
	 * @return true if testee folder is a child anywhere in the child subfolder
	 *         tree of given test folder
	 */
	private boolean testeeChildOf(IFolder testee, IFolder testFolder) {
		Set<HibSubFolder> children = ((HibFolder) testFolder).getSubFolders();
		if (children.contains(testee)) {
			return true;
		}
		for (HibSubFolder sub : children) {
			if (((HibFolder) sub).testeeChildOf(testee, sub))
				return true;
		}
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#containsSubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder)
	 */
	public boolean containsSubfolder(ISubFolder subFolder) {
		Session s = getSession();
		s.load(this, id);
		boolean contains = testeeChildOf(subFolder, this);
		s.close();
		return contains;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#canUseSubfolderName(java.lang.String)
	 */
	public boolean canUseSubfolderName(String name) {
		if (nameMalFormed(name))
			throw new IllegalArgumentException(ILLEGAL_SUBFOLDERNAME);
		boolean canUseName = true;
		Set<String> subnames = new HashSet<String>();
		Session s = getSession();
		s.load(this, id);
		for (HibSubFolder f : getSubFolders()) {
			if (f.getName().equals(name)) {
				canUseName = false;
				break;
			}
		}
		s.close();
		return canUseName;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#canRenameMap(org.pathwayeditor.businessobjects.repository.IMap,
	 *      java.lang.String)
	 */
	public boolean canRenameMap(IMap map, String newMapName) {
		return containsMap(map) && canUseMapName(newMapName);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#canRenameSubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder,
	 *      java.lang.String)
	 */
	public boolean canRenameSubfolder(ISubFolder subFolder, String newFolderName) {
		Session s = getSession();
		s.load(subFolder,((HibSubFolder)subFolder).getId());
		if (!subFolder.getParent().equals( this)){
			s.close();
			throw new IllegalArgumentException(NOT_CHILD);
		}
		s.close();
		if (canUseSubfolderName(newFolderName))
			return true;
		return false;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#canUseMapName(java.lang.String)
	 */
	public boolean canUseMapName(String name) {
		if (nameMalFormed(name))
			return false;
		Session s = getSession();
		s.load(this, id);
		boolean canuse = true;
		for (HibMapDiagram d : hibMapDiagrams) {
			if (d.getName().equals(name))
				canuse = false;
		}
		s.close();
		return canuse;
	}

	private boolean nameMalFormed(String name) {
		return name == null || name.indexOf("/") != -1
				|| name.indexOf(".") != -1 || name.indexOf("\\") != -1;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#containsMap(org.pathwayeditor.businessobjects.repository.IMap)
	 */
	public boolean containsMap(IMap newMap) {
		Session s = getSession();
		s.load(this, id);
		boolean iscontained = hibMapDiagrams.contains(newMap);
		s.close();
		return iscontained;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#createCopyOfMap(org.pathwayeditor.businessobjects.repository.IMap)
	 */
	public IMap createCopyOfMap(IMap origMap) {
		if (origMap == null)
			throw new IllegalArgumentException(ILLEGAL_MAPNAME);
		if (this.containsMap(origMap))
			throw new IllegalArgumentException(MAP_ALREADY_EXISTS);
		Session s = getSession();
		s.load(this, id);
		HibMapDiagram map = new HibMapDiagram(this, (HibMapDiagram) origMap);
		hibMapDiagrams.add(map);
		copyCanvasOf(origMap);
		commitSession(s);
		return map;
	}

	/**
	 * @param origMap
	 *            makes a copy of the original maps canvas, points it to the
	 *            copy map and then saves it to the database
	 */
	void copyCanvasOf(IMap origMap) {
		// TODO implement - NH
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#createCopyOfSubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder)
	 */
	public ISubFolder createCopyOfSubfolder(ISubFolder origSubfolder) {
		if (!canMoveSubfolder(origSubfolder))
			throw new IllegalArgumentException(ILLEGAL_SUBFOLDER);
		Session s = getSession();
		s.load(this, id);
		s.load(origSubfolder, ((HibSubFolder) origSubfolder).getId());
		HibSubFolder copy = new HibSubFolder(this, (HibSubFolder) origSubfolder);
		addSubFolder(copy);
		commitSession(s);
		return copy;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#createMap(java.lang.String)
	 */
	public IMap createMap(String newMapName) {
		if (!canUseMapName(newMapName))
			throw new IllegalArgumentException(ILLEGAL_MAPNAME);
		Session s = getSession();
		s.load(this, id);
		HibMapDiagram map = new HibMapDiagram(this, newMapName);
		hibMapDiagrams.add(map);
		commitSession(s);
		return map;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#createSubfolder(java.lang.String)
	 */
	public ISubFolder createSubfolder(String newSubfolderName) {
		Session sess = getSession();
		sess.load(this, id);
		if (!canUseSubfolderName(newSubfolderName))
			throw new IllegalArgumentException(ILLEGAL_SUBFOLDERNAME);
		HibSubFolder folder = new HibSubFolder(this, newSubfolderName);
		subFolders.add(folder);
		commitSession(sess);
		return folder;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#getMapIterator()
	 */
	public Iterator<? extends IMap> getMapIterator() {
		Session s = getSession();
		s.load(this, id);
		Iterator<? extends IMap> it = (Iterator<? extends IMap>) hibMapDiagrams
				.iterator();
		s.close();
		return it;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#moveMap(org.pathwayeditor.businessobjects.repository.IMap)
	 */
	public void moveMap(IMap newMap) {
		if (newMap == null)
			throw new IllegalArgumentException(ILLEGAL_MAPNAME);
		if (this.containsMap(newMap))
			throw new IllegalArgumentException(MAP_ALREADY_EXISTS);
		Session s = getSession();
		s.load(this, id);
		HibMapDiagram m = (HibMapDiagram) newMap;
		m.changeFolder(this);
		commitSession(s);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#moveSubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder)
	 */
	public void moveSubfolder(ISubFolder subFolder) {
		Session sess = getSession();
		sess.load(this, id);
		sess.load(subFolder, ((HibSubFolder) subFolder).getId());
		if (!canMoveSubfolder(subFolder))
			throw new IllegalArgumentException(ILLEGAL_SUBFOLDER);
		addSubFolder((HibSubFolder) subFolder);
		commitSession(sess);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#numMaps()
	 */
	public int numMaps() {
		if (hibMapDiagrams == null)
			return 0;
		Session s = getSession();
		s.load(this, id);
		int nummaps = hibMapDiagrams.size();
		s.close();
		return nummaps;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#numSubFolders()
	 */
	public int numSubFolders() {
		if (subFolders == null)
			return 0;
		Session s = getSession();
		s.load(this, id);
		int numsubfolders = getSubFolders().size();
		s.close();
		return numsubfolders;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#removeSubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder)
	 */
	public void removeSubfolder(ISubFolder subFolder) {
		Session sess = getSession();
		sess.load(this, id);
		if (subFolders.contains(subFolder))
			removeHibSubFolder((HibSubFolder) subFolder);
		else {
			for (HibSubFolder sub : subFolders)
				sub.removeSubfolder(subFolder);
		}
		HibernateUtil.commitAndCloseSession(sess);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#renameMap(org.pathwayeditor.businessobjects.repository.IMap,
	 *      java.lang.String)
	 */
	public void renameMap(IMap map, String newMapName) {
		Session s = getSession();
		s.load(this, id);
		if (canUseMapName(newMapName)) {
			HibMapDiagram m = (HibMapDiagram) map;// map needs to be
													// explicitly removed from
													// its owning collection and
													// added back after name
													// change
			hibMapDiagrams.remove(m); // order is important - rename of map
										// changes equals!
			m.setName(newMapName);
			hibMapDiagrams.add(m);
			commitSession(s);
		} else
			throw new IllegalArgumentException();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#renameSubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder,
	 *      java.lang.String)
	 */
	public void renameSubfolder(ISubFolder subFolder, String newFolderName) {
		Session s = getSession();
		s.load(this, id);
		if (!canRenameSubfolder(subFolder, newFolderName))
			throw new IllegalArgumentException(ILLEGAL_SUBFOLDERNAME);
		
		((HibSubFolder) subFolder).setName(newFolderName); // this step is
		// necessary as
		// Hibernate
		// does not see
		// the subFolder
		// as = any
		// object in
		// this
		subFolders.remove((HibSubFolder) subFolder); // folders
		// collection of
		// subfolders - so
		// changes in the
		// name are not
		// propogated.
		subFolders.add((HibSubFolder) subFolder);
		commitSession(s);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#getSubFolderIterator()
	 */
	public Iterator<? extends ISubFolder> getSubFolderIterator() {
		Session s = getSession();
		s.load(this, id);
		Iterator<HibSubFolder> it = subFolders.iterator();
		s.close();
		return it;
	}

}
