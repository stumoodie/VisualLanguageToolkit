package org.pathwayeditor.businessobjects.hibernate.pojos;

// Generated 07-May-2008 22:43:44 by Hibernate Tools 3.2.1.GA

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

/**
 * Folder generated by hbm2java
 */
public class HibFolder implements Serializable {
	private static final long serialVersionUID = 8668639813872187460L;
	private Long id;
	private Set<HibMapDiagram> hibMapDiagrams = new HashSet<HibMapDiagram>(0);
	private Set<HibNonRootFolder> subFolders = new HashSet<HibNonRootFolder>(0);

	public HibFolder() {
	}

	public HibFolder(HibFolder other) {
		for (HibMapDiagram diagram : hibMapDiagrams) {
			this.hibMapDiagrams.add(new HibMapDiagram(this, diagram));
		}
		for (HibNonRootFolder subFolder : subFolders) {
			this.subFolders.add(new HibNonRootFolder(this, subFolder));
		}
	}

	public Long getId() {
		return this.id;
	}

	void setId(Long id) {
		this.id = id;
	}

	public Set<HibMapDiagram> getMapDiagrams() {
		return this.hibMapDiagrams;
	}

	void setMapDiagrams(Set<HibMapDiagram> hibMapDiagrams) {
		this.hibMapDiagrams = hibMapDiagrams;
	}

	public Set<HibNonRootFolder> getSubFolders() {
		return this.subFolders;
	}

	void setSubFolders(Set<HibNonRootFolder> subFolders) {
		this.subFolders = subFolders;
	}

	/**
	 * toString
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@").append(
				Integer.toHexString(hashCode())).append(" [");
		buffer.append("id").append("='").append(getId()).append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	void addSubFolder(HibNonRootFolder newSubFolder) {
		if (newSubFolder == null)
			throw new IllegalArgumentException("newSubFolder cannot be null");

		HibFolder oldParentFolder = newSubFolder.getParentFolder();
		if (oldParentFolder != null) {
			oldParentFolder.subFolders.remove(newSubFolder);
		}
		this.subFolders.add(newSubFolder);
		newSubFolder.setParentFolder(this);
	}

	void removeSubFolder(HibNonRootFolder subFolder) {
		if (subFolder == null)
			throw new IllegalArgumentException("subFolder cannot be null");
		if (subFolder.getParentFolder() != this)
			throw new IllegalArgumentException(
					"subFolder must be a child of this folder");

		this.subFolders.remove(subFolder);
		subFolder.setParentFolder(null);
	}
}
