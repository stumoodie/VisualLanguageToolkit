package org.pathwayeditor.businessobjects.hibernate.pojos;

// Generated 07-May-2008 22:43:44 by Hibernate Tools 3.2.1.GA

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import org.pathwayeditor.businessobjects.pojos.Canvas;
import org.pathwayeditor.businessobjects.pojos.IBusinessObjectData;
import org.pathwayeditor.businessobjects.pojos.ISyntaxDependentObjectProvider;
import org.pathwayeditor.businessobjects.pojos.ISyntaxMappingFactory;

/**
 * Canvas generated by hbm2java
 */
public class HibCanvas implements IBusinessObjectData<Canvas>, ISyntaxDependentObjectProvider,
			Serializable {
	private static final long serialVersionUID = 807306412269098190L;

	private Long id;
	private HibMapDiagram hibMapDiagram;
	private HibContext hibContext;
	private int gridX;
	private int gridY;
	private boolean gridEnabled;
	private boolean snapToGridEnabled;
	private int backgroundRed;
	private int backgroundGreen;
	private int backgroundBlue;
	private int canvasWidth;
	private int canvasHeight;
	private Set<HibShape> hibShapes = new HashSet<HibShape>(0);
	private Set<HibLink> hibLinks = new HashSet<HibLink>(0);
	private Set<HibLabel> hibLabels = new HashSet<HibLabel>(0);
	private HibModel hibGraph = null;
	private Canvas businessObject;
	private ISyntaxMappingFactory mappingFactory;

	public HibCanvas() {
	}

	public HibCanvas(HibMapDiagram newMap, HibCanvas other) {
		this.hibMapDiagram = newMap;
		this.hibContext = other.hibContext;
		this.gridX = other.gridX;
		this.gridY = other.gridY;
		this.gridEnabled = other.gridEnabled;
		this.snapToGridEnabled = other.snapToGridEnabled;
		this.backgroundRed = other.backgroundRed;
		this.backgroundGreen = other.backgroundGreen;
		this.backgroundRed = other.backgroundRed;
		this.canvasWidth = other.canvasWidth;
		this.canvasHeight = other.canvasHeight;
		for(HibShape hibShape : other.hibShapes){
			this.hibShapes.add(hibShape);
		}
		for(HibLink hibLink : other.hibLinks){
			this.hibLinks.add(hibLink);
		}
		for(HibLabel hibLabel : other.hibLabels){
			this.hibLabels.add(hibLabel);
		}
	}

	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public HibMapDiagram getMapDiagram() {
		return this.hibMapDiagram;
	}

	public void setMapDiagram(HibMapDiagram hibMapDiagram) {
		this.hibMapDiagram = hibMapDiagram;
	}

	public HibContext getContext() {
		return this.hibContext;
	}

	public void setContext(HibContext hibContext) {
		this.hibContext = hibContext;
	}

	public int getGridX() {
		return this.gridX;
	}

	public void setGridX(int gridX) {
		this.gridX = gridX;
	}

	public int getGridY() {
		return this.gridY;
	}

	public void setGridY(int gridY) {
		this.gridY = gridY;
	}

	public boolean isGridEnabled() {
		return this.gridEnabled;
	}

	public void setGridEnabled(boolean gridEnabled) {
		this.gridEnabled = gridEnabled;
	}

	public boolean isSnapToGridEnabled() {
		return this.snapToGridEnabled;
	}

	public void setSnapToGridEnabled(boolean snapToGridEnabled) {
		this.snapToGridEnabled = snapToGridEnabled;
	}

	public int getBackgroundRed() {
		return this.backgroundRed;
	}

	public void setBackgroundRed(int backgroundRed) {
		this.backgroundRed = backgroundRed;
	}

	public int getBackgroundGreen() {
		return this.backgroundGreen;
	}

	public void setBackgroundGreen(int backgroundGreen) {
		this.backgroundGreen = backgroundGreen;
	}

	public int getBackgroundBlue() {
		return this.backgroundBlue;
	}

	public void setBackgroundBlue(int backgroundBlue) {
		this.backgroundBlue = backgroundBlue;
	}

	public int getCanvasWidth() {
		return this.canvasWidth;
	}

	public void setCanvasWidth(int canvasWidth) {
		this.canvasWidth = canvasWidth;
	}

	public int getCanvasHeight() {
		return this.canvasHeight;
	}

	public void setCanvasHeight(int canvasHeight) {
		this.canvasHeight = canvasHeight;
	}

	public Set<HibShape> getShapes() {
		return this.hibShapes;
	}

	void setShapes(Set<HibShape> shapes) {
		this.hibShapes = shapes;
	}

	public Set<HibLink> getLinks() {
		return this.hibLinks;
	}

	void setLinks(Set<HibLink> hibLinks) {
		this.hibLinks = hibLinks;
	}

	public Set<HibLabel> getLabels() {
		return this.hibLabels;
	}

	void setLabels(Set<HibLabel> hibLabels) {
		this.hibLabels = hibLabels;
	}
	
	public HibModel getModel(){
		return this.hibGraph;
	}
	
	void setModel(HibModel model){
		this.hibGraph = model;
	}
	
	public void changeModel(HibModel model){
		//TODO: implement this!
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof HibCanvas))
			return false;
		HibCanvas castOther = (HibCanvas) other;

		return ((this.getMapDiagram() == castOther.getMapDiagram()) || (this
				.getMapDiagram() != null
				&& castOther.getMapDiagram() != null && this.getMapDiagram()
				.equals(castOther.getMapDiagram())));
	}

	public int hashCode() {
		int result = 17;
		result = 37
				* result
				+ (getMapDiagram() == null ? 0 : this.getMapDiagram()
						.hashCode());

		return result;
	}

	public void changeMapDiagram(HibMapDiagram newMapDiagram) {
		this.setMapDiagram(newMapDiagram);
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.pojos.IBusinessObjectData#getBusinessObject()
	 */
	public Canvas getBusinessObject() {
		if(this.businessObject == null){
			this.businessObject = new Canvas(this.mappingFactory, this);
		}
		return this.businessObject;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.pojos.ISyntaxDependentObjectProvider#setSyntaxMappingFactory(org.pathwayeditor.businessobjects.pojos.ISyntaxMappingFactory)
	 */
	public void setSyntaxMappingFactory(ISyntaxMappingFactory mappingFactory) {
		this.mappingFactory = mappingFactory;
	}
}
