package org.pathwayeditor.businessobjects.hibernate.pojos;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.pathwayeditor.businessobjects.drawingprimitives.ICanvas;
import org.pathwayeditor.businessobjects.drawingprimitives.ICanvasAttribute;
import org.pathwayeditor.businessobjects.drawingprimitives.IDrawingElementSelection;
import org.pathwayeditor.businessobjects.drawingprimitives.ILabelAttribute;
import org.pathwayeditor.businessobjects.drawingprimitives.ILinkAttribute;
import org.pathwayeditor.businessobjects.drawingprimitives.IModel;
import org.pathwayeditor.businessobjects.drawingprimitives.ISelectionFactory;
import org.pathwayeditor.businessobjects.drawingprimitives.IShapeAttribute;
import org.pathwayeditor.businessobjects.drawingprimitives.IShapeNode;
import org.pathwayeditor.businessobjects.drawingprimitives.attributes.RGB;
import org.pathwayeditor.businessobjects.drawingprimitives.attributes.Size;
import org.pathwayeditor.businessobjects.drawingprimitives.listeners.IPropertyChangeListener;
import org.pathwayeditor.businessobjects.drawingprimitives.listeners.ListenablePropertyChangeItem;
import org.pathwayeditor.businessobjects.drawingprimitives.listeners.PropertyChange;
import org.pathwayeditor.businessobjects.hibernate.helpers.IHibNotationFactory;
import org.pathwayeditor.businessobjects.notationsubsystem.INotationSubsystem;
import org.pathwayeditor.businessobjects.typedefn.IRootObjectType;

import uk.ed.inf.graph.util.IndexCounter;

/**
 * Canvas generated by hbm2java
 */
public class HibCanvas implements ICanvas, Serializable {
	private static final long serialVersionUID = 807306412269098190L;

	private static final int DEFAULT_CANVAS_WIDTH = 200;
	private static final int DEFAULT_CANVAS_HEIGHT = 300;
	private static final int DEFAULT_BGD_GREEN = 255;
	private static final int DEFAULT_BGD_BLUE = 255;
	private static final int DEFAULT_BGD_RED = 255;
	private static final int DEFAULT_GRID_HEIGHT = 20;
	private static final int DEFAULT_GRID_WIDTH = 20;
	private static final boolean DEFAULT_GRIB_ENABLED_VALUE = false;
	private static final boolean DEFAULT_SNAP_TO_GRID_VALUE = false;
	private static final int MODEL_EMPTY_COUNT = 1; // has just root node when "empty" 
	private static final int MIN_NAME_LEN = 0;
	private static final Pattern NAME_REGEXP = Pattern.compile("\\w.*");
	
	private Long id;
	private HibNotation hibNotation;
	private INotationSubsystem notation;
	private Size gridSize = new Size(DEFAULT_GRID_WIDTH, DEFAULT_GRID_HEIGHT);
	private boolean gridEnabled = DEFAULT_GRIB_ENABLED_VALUE;
	private boolean snapToGridEnabled = DEFAULT_SNAP_TO_GRID_VALUE;
	private RGB backgroundColour = new RGB(DEFAULT_BGD_RED, DEFAULT_BGD_GREEN, DEFAULT_BGD_BLUE);
	private Size canvasSize = new Size(DEFAULT_CANVAS_WIDTH, DEFAULT_CANVAS_HEIGHT);
	private Date created = new Date();
	private Date modified = new Date();
	private String canvasName;
	private int mapINode;
	private String repository;
	private HibModel model ;
	private IndexCounter shapeSerialCounter = new IndexCounter();
	private IndexCounter linkSerialCounter = new IndexCounter();
	private IndexCounter labelSerialCounter = new IndexCounter();
	private IndexCounter propertySerialCounter = new IndexCounter();
	private Set<HibShapeAttribute> shapeAttributes = new HashSet<HibShapeAttribute>(0);
	private Set<HibLinkAttribute> linkAttributes = new HashSet<HibLinkAttribute>(0);
	private Set<HibLabelAttribute> labelAttributes = new HashSet<HibLabelAttribute>(0);
	private Set<HibProperty> properties = new HashSet<HibProperty>(0);
	private final ListenablePropertyChangeItem listenablePropertyChangeItem;

	/**
	 * Default constructor for use ONLY by hibernate.
	 * @deprecated Use one of the other constructors to construct this class in application code.
	 */
	HibCanvas() {
		this.listenablePropertyChangeItem = new ListenablePropertyChangeItem();
	}

	public HibCanvas(String repoName, int iNode, IHibNotationFactory hibNotationFactory, INotationSubsystem notationSubsystem,
			String canvasName) {
		this();
		if(repoName == null || hibNotationFactory == null || notationSubsystem == null) throw new IllegalArgumentException("One or more parameters is null");
		
		if(!checkValidName(canvasName)) throw new IllegalArgumentException("Name invalid: " + canvasName);
		
		this.repository = repoName;
		this.mapINode = iNode;
		this.notation = notationSubsystem;
		this.hibNotation = hibNotationFactory.getNotation();
		IRootObjectType rootObjectType = notationSubsystem.getSyntaxService().getRootObjectType();
		this.model = new HibModel(this, rootObjectType, hibNotationFactory);
		this.canvasName = canvasName;
	}
	
	public HibCanvas(String newRepoName, int newINode, HibCanvas other) {
		this();
		this.repository = newRepoName;
		this.mapINode = newINode;
		this.hibNotation = other.hibNotation;
		this.gridSize = other.getGridSize();
		this.gridEnabled = other.gridEnabled;
		this.canvasName = other.canvasName;
		this.snapToGridEnabled = other.snapToGridEnabled;
		this.backgroundColour = other.getBackgroundColour();
		this.canvasSize = other.getCanvasSize();
		this.model = new HibModel(this, other.getGraph());
		this.notation = other.notation;
		this.shapeSerialCounter = new IndexCounter();
	}

	public Long getId() {
		return this.id;
	}

	@SuppressWarnings("unused")
	private void setId(Long id) {
		this.id = id;
	}

	public INotationSubsystem getNotationSubsystem() {
		return this.notation;
	}
	
	public void setNotationSubsystem(INotationSubsystem notationSubsystem){
		this.notation = notationSubsystem;
	}

	public void setHibNotation(HibNotation hibNotation) {
		this.hibNotation = hibNotation;
	}
	
	public HibNotation getHibNotation(){
		return this.hibNotation;
	}
	
	public Date getCreated() {
		return new Date(this.created.getTime());
	}

	public void setCreated(Date created) {
		this.created = new Date(created.getTime());
	}

	public Date getModified() {
		return new Date(this.modified.getTime());
	}

	public void setModified(Date modified) {
		this.modified = new Date(modified.getTime());
	}

	int getGridX() {
		return this.gridSize.getWidth();
	}

	void setGridX(int gridX) {
		this.gridSize = this.gridSize.newWidth(gridX);
	}

	int getGridY() {
		return this.gridSize.getHeight();
	}

	void setGridY(int gridY) {
		this.gridSize = this.gridSize.newHeight(gridY);
	}

	public Size getGridSize() {
		return this.gridSize;
	}

	public void setGridSize(Size newGridSize){
		Size oldGridSize = this.getGridSize();
		this.gridSize = newGridSize;
		this.listenablePropertyChangeItem.notifyProperyChange(PropertyChange.GRID_SIZE, oldGridSize, newGridSize);
	}
	
	public boolean isGridEnabled() {
		return this.gridEnabled;
	}

	public void setGridEnabled(boolean gridEnabled) {
		boolean oldGridEnabled = this.gridEnabled;
		this.gridEnabled = gridEnabled;
		this.listenablePropertyChangeItem.notifyProperyChange(PropertyChange.GRID_SHOWN, oldGridEnabled, gridEnabled);
	}

//	public boolean isSnapToGridEnabled() {
//		return this.snapToGridEnabled;
//	}
//
//	public void setSnapToGridEnabled(boolean snapToGridEnabled) {
//		boolean oldSnapToGridEnabled = this.snapToGridEnabled;
//		this.snapToGridEnabled = snapToGridEnabled;
//		this.listenerablePropertyChangeItem.notifyProperyChange(PropertyChange.SNAP_TO_GRID_ENABLED, oldSnapToGridEnabled, this.snapToGridEnabled);
//	}

	public int getBackgroundRed() {
		return this.backgroundColour.getRed();
	}

	public void setBackgroundRed(int backgroundRed) {
		this.backgroundColour = this.backgroundColour.newRed(backgroundRed);
	}

	public int getBackgroundGreen() {
		return this.backgroundColour.getGreen();
	}

	public void setBackgroundGreen(int backgroundGreen) {
		this.backgroundColour = this.backgroundColour.newGreen(backgroundGreen);
	}

	public int getBackgroundBlue() {
		return this.backgroundColour.getBlue();
	}

	public void setBackgroundBlue(int backgroundBlue) {
		this.backgroundColour = this.backgroundColour.newBlue(backgroundBlue);
	}

	public int getCanvasWidth() {
		return this.canvasSize.getWidth();
	}

	public void setCanvasWidth(int canvasWidth) {
		this.canvasSize = this.canvasSize.newWidth(canvasWidth);
	}

	public int getCanvasHeight() {
		return this.canvasSize.getHeight();
	}

	public void setCanvasHeight(int canvasHeight) {
		this.canvasSize = this.canvasSize.newHeight(canvasHeight);
	}


	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getBackgroundColour()
	 */
	public RGB getBackgroundColour() {
		return this.backgroundColour;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#isSnapToGridOn()
	 */
	public boolean isSnapToGridOn() {
		return this.snapToGridEnabled;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#setBackgroundColour(org.pathwayeditor.businessobjects.drawingprimitives.attributes.RGB)
	 */
	public void setBackgroundColour(RGB backgroundColour) {
		if ( backgroundColour == null)
			throw new IllegalArgumentException ( "BackgroundColor cannot be null") ;

		RGB oldBackgroundColour = this.backgroundColour;
		this.backgroundColour = backgroundColour;
		this.listenablePropertyChangeItem.notifyProperyChange(PropertyChange.BACKGROUND_COLOUR, oldBackgroundColour, this.backgroundColour);
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#setSnapToGrid(boolean)
	 */
	public void setSnapToGrid(boolean snapToGridStatus) {
		boolean oldValue = this.snapToGridEnabled;
		this.snapToGridEnabled = snapToGridStatus ;
		this.listenablePropertyChangeItem.notifyProperyChange(PropertyChange.SNAP_TO_GRID_ENABLED, oldValue, this.snapToGridEnabled);
	}
	
	boolean getSnapToGrid(){
		return this.snapToGridEnabled;
	}
	
	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getMapSize()
	 */
	public Size getCanvasSize() {
		return this.canvasSize;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#setMapSize(org.pathwayeditor.businessobjects.drawingprimitives.attributes.Size)
	 */
	public void setCanvasSize(Size size) {
		if (size == null)
			throw new IllegalArgumentException () ;

		Size oldCanvasSize = this.canvasSize;
		this.canvasSize = size;
		this.listenablePropertyChangeItem.notifyProperyChange(PropertyChange.CANVAS_SIZE, oldCanvasSize, this.canvasSize);
	}

	public int getMapINode() {
		return this.mapINode;
	}

	public void setMapINode(int mapINode) {
		this.mapINode = mapINode;
	}

	public String getRepositoryName() {
		return this.repository;
	}

	public void setRepositoryName(String repository) {
		this.repository = repository;
	}

	public HibModel getGraph() {
		return this.model;
	}

	public void setGraph(HibModel graph) {
		this.model = graph;
	}
	
	void setLastShapeSerial(int lastIndexValue){
		this.shapeSerialCounter = new IndexCounter(lastIndexValue);
	}
	
	int getLastShapeSerial(){
		return this.shapeSerialCounter.getLastIndex();
	}
	
	public IndexCounter getShapeSerialCounter(){
		return this.shapeSerialCounter;
	}

	void setLastLabelSerial(int lastIndexValue){
		this.labelSerialCounter = new IndexCounter(lastIndexValue);
	}
	
	int getLastLabelSerial(){
		return this.labelSerialCounter.getLastIndex();
	}
	
	public IndexCounter getLabelSerialCounter(){
		return this.labelSerialCounter;
	}

	void setLastLinkSerial(int lastIndexValue){
		this.linkSerialCounter = new IndexCounter(lastIndexValue);
	}
	
	int getLastLinkSerial(){
		return this.linkSerialCounter.getLastIndex();
	}
	
	public IndexCounter getLinkSerialCounter(){
		return this.linkSerialCounter;
	}

	void setLastPropertyCreationSerial(int lastIndexValue){
		this.propertySerialCounter = new IndexCounter(lastIndexValue);
	}
	
	int getLastPropertyCreationSerial(){
		return this.propertySerialCounter.getLastIndex();
	}
	
	public IndexCounter getPropertySerialCounter(){
		return this.propertySerialCounter;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#createCopy(org.pathwayeditor.businessobjects.repository.IMap)
	 */
	public void copyHere(ICanvas canvas) {
		if(this.canCopyHere(canvas) == false) throw new IllegalArgumentException("the parameter canvas cannot be copied here");
		
		IModel otherModel = canvas.getModel();
		Iterator<IShapeNode> topShapeNodeIter = otherModel.getRootNode().getSubModel().shapeNodeIterator();
		ISelectionFactory selectionFact = otherModel.newSelectionFactory();
		while(topShapeNodeIter.hasNext()){
			selectionFact.addDrawingNode(topShapeNodeIter.next());
		}
		IDrawingElementSelection selection = selectionFact.createGeneralSelection();
		this.getModel().getRootNode().getSubModel().copyHere(selection);
		// now copy additional info
		ICanvas thisCanvas = this; // doing this so we can be use to use interface methods which will have 
									// listeners associated with them.
		thisCanvas.setBackgroundColour(canvas.getBackgroundColour());
		thisCanvas.setCanvasSize(canvas.getCanvasSize());
		thisCanvas.setGridSize(canvas.getGridSize());
		thisCanvas.setGridEnabled(canvas.isGridEnabled());
		thisCanvas.setSnapToGrid(canvas.isSnapToGridOn());
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getModel()
	 */
	public HibModel getModel() {
		return this.model;
	}
	
	void setModel(HibModel model){
		this.model = model;
	}

	public Set<HibShapeAttribute> getShapeAttributes() {
		return this.shapeAttributes;
	}

	public void setShapeAttributes(Set<HibShapeAttribute> shapeAttributes) {
		this.shapeAttributes = shapeAttributes;
	}

	public Set<HibLinkAttribute> getLinkAttributes() {
		return this.linkAttributes;
	}

	public void setLinkAttributes(Set<HibLinkAttribute> linkAttributes) {
		this.linkAttributes = linkAttributes;
	}

	public Set<HibLabelAttribute> getLabelAttributes() {
		return this.labelAttributes;
	}

	public void setLabelAttributes(Set<HibLabelAttribute> labelAttributes) {
		this.labelAttributes = labelAttributes;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + this.mapINode;
		result = prime * result
				+ ((this.repository == null) ? 0 : this.repository.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof HibCanvas))
			return false;
		HibCanvas other = (HibCanvas) obj;
		if (this.mapINode != other.getMapINode())
			return false;
		if (this.repository == null) {
			if (other.getRepositoryName() != null)
				return false;
		} else if (!this.repository.equals(other.getRepositoryName()))
			return false;
		return true;
	}

	public Set<HibProperty> getProperties() {
		return this.properties;
	}

	public void setProperties(Set<HibProperty> properties) {
		this.properties = properties;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.listeners.ChangeListenee#addChangeListener(org.pathwayeditor.businessobjects.drawingprimitives.listeners.IPropertyChangeListener)
	 */
	public void addChangeListener(IPropertyChangeListener listener) {
		this.listenablePropertyChangeItem.addChangeListener(listener);
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.listeners.ChangeListenee#listenerIterator()
	 */
	public Iterator<IPropertyChangeListener> listenerIterator() {
		return this.listenablePropertyChangeItem.listenerIterator();
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.listeners.ChangeListenee#removeChangeListener(org.pathwayeditor.businessobjects.drawingprimitives.listeners.IPropertyChangeListener)
	 */
	public void removeChangeListener(IPropertyChangeListener listener) {
		this.listenablePropertyChangeItem.removeChangeListener(listener);
	}
	
	@Override
	public String toString(){
		StringBuilder builder = new StringBuilder(this.getClass().getSimpleName());
		builder.append("(repoName=");
		builder.append(this.getRepositoryName());
		builder.append(", iNode=");
		builder.append(this.getMapINode());
		builder.append(")");
		return builder.toString();
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#containsLabelAttribute(int)
	 */
	public boolean containsLabelAttribute(int attributeSerial) {
		return findAttribute(this.labelAttributes, attributeSerial) != null;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#containsLinkAttribute(int)
	 */
	public boolean containsLinkAttribute(int attributeSerial) {
		return findAttribute(this.linkAttributes, attributeSerial) != null;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#containsShapeAttribute(int)
	 */
	public boolean containsShapeAttribute(int attributeSerial) {
		return findAttribute(this.shapeAttributes, attributeSerial) != null;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#findAttribute(int)
	 */
	public ICanvasAttribute findAttribute(int attributeSerial) {
		ICanvasAttribute retVal = findAttribute(this.shapeAttributes, attributeSerial);
		if(retVal == null) {
			retVal = findAttribute(this.linkAttributes, attributeSerial);
		}
		if(retVal == null) {
			retVal = findAttribute(this.labelAttributes, attributeSerial);
		}
		return retVal;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getLabelAttribute(int)
	 */
	public ILabelAttribute getLabelAttribute(int attributeSerial) {
		ILabelAttribute retVal = findAttribute(this.labelAttributes, attributeSerial);
		if(retVal == null) {
			throw new IllegalArgumentException("attributeSerial must refer to an attribute contained by this canvas");
		}
		return retVal;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getLinkAttribute(int)
	 */
	public ILinkAttribute getLinkAttribute(int attributeSerial) {
		ILinkAttribute retVal = findAttribute(this.linkAttributes, attributeSerial);
		if(retVal == null) {
			throw new IllegalArgumentException("attributeSerial must refer to an attribute contained by this canvas");
		}
		return retVal;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getShapeAttribute(int)
	 */
	public IShapeAttribute getShapeAttribute(int attributeSerial) {
		IShapeAttribute retVal = findAttribute(this.shapeAttributes, attributeSerial);
		if(retVal == null) {
			throw new IllegalArgumentException("attributeSerial must refer to an attribute contained by this canvas");
		}
		return retVal;
	}


	private static <T extends ICanvasAttribute> T findAttribute(Set<T> searchSet, int creationSerial) {
		T retVal = null;
		for(T attribute : searchSet) {
			if(attribute.getCreationSerial() == creationSerial) {
				retVal = attribute;
			}
		}
		return retVal;  
	}

	public boolean isEmpty(){
		return this.model.numDrawingElements() == MODEL_EMPTY_COUNT;
	}
	
	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#canCopyHere(org.pathwayeditor.businessobjects.drawingprimitives.ICanvas)
	 */
	public boolean canCopyHere(ICanvas canvas) {
		boolean retVal = false;
		if(canvas != null){
			retVal = !this.equals(canvas) && this.getNotationSubsystem().equals(canvas.getNotationSubsystem())
				&& this.isEmpty();
		}
		return retVal;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getINode()
	 */
	public int getINode() {
		return this.mapINode;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.drawingprimitives.ICanvas#getName()
	 */
	public String getName() {
		return this.canvasName;
	}
	
	public boolean isValidName(String name){
		return checkValidName(name);
	}
	
	public static boolean checkValidName(String name){
		boolean retVal = false;
		if(name != null && name.length() > MIN_NAME_LEN){
			// string not null and not empty
			final Matcher matcher = NAME_REGEXP.matcher(name);
			retVal = matcher.matches();
		}
		return retVal;
	}
	
	public void setName(String name){
		if(!isValidName(name)) throw new IllegalArgumentException("Invalid name: " + name);
		
		this.canvasName = name;
	}
}
