package org.pathwayeditor.businessobjects.hibernate.pojos;
// Generated 07-May-2008 22:43:44 by Hibernate Tools 3.2.1.GA


import java.util.ArrayList;
import java.util.List;

/**
 * Canvas generated by hbm2java
 */
public class Canvas  implements java.io.Serializable {


     private Long id;
     private MapDiagram mapDiagram;
     private Context context;
     private int gridX;
     private int gridY;
     private boolean gridEnabled;
     private boolean snapToGridEnabled;
     private int backgroundRed;
     private int backgroundGreen;
     private int backgroundBlue;
     private int canvasWidth;
     private int canvasHeight;
     private List<RootShape> shapes = new ArrayList<RootShape>(0);
     private List<Link> links = new ArrayList<Link>(0);
     private List<Label> labels = new ArrayList<Label>(0);

    public Canvas() {
    }

	
    public Canvas(MapDiagram mapDiagram, Context context, int gridX, int gridY, boolean gridEnabled, boolean snapToGridEnabled, int backgroundRed, int backgroundGreen, int backgroundBlue, int canvasWidth, int canvasHeight) {
        this.mapDiagram = mapDiagram;
        this.context = context;
        this.gridX = gridX;
        this.gridY = gridY;
        this.gridEnabled = gridEnabled;
        this.snapToGridEnabled = snapToGridEnabled;
        this.backgroundRed = backgroundRed;
        this.backgroundGreen = backgroundGreen;
        this.backgroundBlue = backgroundBlue;
        this.canvasWidth = canvasWidth;
        this.canvasHeight = canvasHeight;
    }
    public Canvas(MapDiagram mapDiagram, Context context, int gridX, int gridY, boolean gridEnabled, boolean snapToGridEnabled, int backgroundRed, int backgroundGreen, int backgroundBlue, int canvasWidth, int canvasHeight, List<RootShape> shapes, List<Link> links, List<Label> labels) {
       this.mapDiagram = mapDiagram;
       this.context = context;
       this.gridX = gridX;
       this.gridY = gridY;
       this.gridEnabled = gridEnabled;
       this.snapToGridEnabled = snapToGridEnabled;
       this.backgroundRed = backgroundRed;
       this.backgroundGreen = backgroundGreen;
       this.backgroundBlue = backgroundBlue;
       this.canvasWidth = canvasWidth;
       this.canvasHeight = canvasHeight;
       this.shapes = shapes;
       this.links = links;
       this.labels = labels;
    }
   
    public Long getId() {
        return this.id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    public MapDiagram getMapDiagram() {
        return this.mapDiagram;
    }
    
    public void setMapDiagram(MapDiagram mapDiagram) {
        this.mapDiagram = mapDiagram;
    }
    public Context getContext() {
        return this.context;
    }
    
    public void setContext(Context context) {
        this.context = context;
    }
    public int getGridX() {
        return this.gridX;
    }
    
    public void setGridX(int gridX) {
        this.gridX = gridX;
    }
    public int getGridY() {
        return this.gridY;
    }
    
    public void setGridY(int gridY) {
        this.gridY = gridY;
    }
    public boolean isGridEnabled() {
        return this.gridEnabled;
    }
    
    public void setGridEnabled(boolean gridEnabled) {
        this.gridEnabled = gridEnabled;
    }
    public boolean isSnapToGridEnabled() {
        return this.snapToGridEnabled;
    }
    
    public void setSnapToGridEnabled(boolean snapToGridEnabled) {
        this.snapToGridEnabled = snapToGridEnabled;
    }
    public int getBackgroundRed() {
        return this.backgroundRed;
    }
    
    public void setBackgroundRed(int backgroundRed) {
        this.backgroundRed = backgroundRed;
    }
    public int getBackgroundGreen() {
        return this.backgroundGreen;
    }
    
    public void setBackgroundGreen(int backgroundGreen) {
        this.backgroundGreen = backgroundGreen;
    }
    public int getBackgroundBlue() {
        return this.backgroundBlue;
    }
    
    public void setBackgroundBlue(int backgroundBlue) {
        this.backgroundBlue = backgroundBlue;
    }
    public int getCanvasWidth() {
        return this.canvasWidth;
    }
    
    public void setCanvasWidth(int canvasWidth) {
        this.canvasWidth = canvasWidth;
    }
    public int getCanvasHeight() {
        return this.canvasHeight;
    }
    
    public void setCanvasHeight(int canvasHeight) {
        this.canvasHeight = canvasHeight;
    }
    public List<RootShape> getShapes() {
        return this.shapes;
    }
    
     void setShapes(List<RootShape> shapes) {
        this.shapes = shapes;
    }
    public List<Link> getLinks() {
        return this.links;
    }
    
     void setLinks(List<Link> links) {
        this.links = links;
    }
    public List<Label> getLabels() {
        return this.labels;
    }
    
     void setLabels(List<Label> labels) {
        this.labels = labels;
    }


   public boolean equals(Object other) {
         if ( (this == other ) ) return true;
		 if ( (other == null ) ) return false;
		 if ( !(other instanceof Canvas) ) return false;
		 Canvas castOther = ( Canvas ) other; 
         
		 return ( (this.getMapDiagram()==castOther.getMapDiagram()) || ( this.getMapDiagram()!=null && castOther.getMapDiagram()!=null && this.getMapDiagram().equals(castOther.getMapDiagram()) ) );
   }
   
   public int hashCode() {
         int result = 17;
         
         
         result = 37 * result + ( getMapDiagram() == null ? 0 : this.getMapDiagram().hashCode() );
         
         
         
         
         
         
         
         
         
         
         
         
         
         return result;
   }   

  // The following is extra code specified in the hbm.xml files

	private static final long serialVersionUID = 807306412269098190L;

	public Canvas(MapDiagram newMap, Canvas other){
		this.mapDiagram = newMap;
		this.context = other.context;
		this.gridX = other.gridX;
		this.gridY = other.gridY;
		this.gridEnabled = other.gridEnabled;
		this.snapToGridEnabled = other.snapToGridEnabled;
		this.backgroundRed = other.backgroundRed;
		this.backgroundGreen = other.backgroundGreen;
		this.backgroundRed = other.backgroundRed;
		this.canvasWidth = other.canvasWidth;
		this.canvasHeight = other.canvasHeight;
		for(RootShape rootShape : this.shapes){
			this.shapes.add(new RootShape(this, rootShape));
		}
		// TODO: Copy Links!
	}
    
	public void changeMapDiagram(MapDiagram newMapDiagram){
		this.setMapDiagram(newMapDiagram);
	}

    	
  // end of extra code specified in the hbm.xml files

}


