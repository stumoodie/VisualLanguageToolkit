/*
Copyright 2009, Court of the University of Edinburgh

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License. 
*/
package org.pathwayeditor.businessobjects.hibernate.pojos;

import org.pathwayeditor.businessobjects.repository.IRootFolder;
import org.pathwayeditor.businessobjects.repository.ISubFolder;


/**
 * RootFolder generated by hbm2java
 */
public class HibRootFolder extends HibFolder implements IRootFolder {
	private static final long serialVersionUID = 3780104587152506255L;

	/**
	 * Default constructor that should only be used by hibernate.
	 * @deprecated should not be used by hibernate code, use one of the other constructors. 
	 */
	HibRootFolder() {
		super();
	}

	public HibRootFolder(HibRepository repository) {
		super(repository);
	}

	/**
	 * Copy constructor for hibernate object. Copies to a new repository that is
	 * provided.
	 * 
	 * @param newRepository
	 * @param other
	 */
	public HibRootFolder(HibRepository newRepository, HibRootFolder other) {
		super(newRepository, other);
//		setOwningRepository(newRepository);
	}

//	public HibRepository getOwningRepository() {
//		return this.owningRepository;
//	}

//	void setOwningRepository(HibRepository hibRepository) {
//		this.owningRepository = hibRepository;
//		setRepository(hibRepository);
//	}

//	public void changeRepository(HibRepository newRepository) {
//		HibRepository oldRepository = this.owningRepository;
//		this.owningRepository = newRepository;
//		if (oldRepository != null) {
//			oldRepository.setHibRootFolder(null);
//		}
//		if (this.owningRepository != null) {
//			this.owningRepository.setHibRootFolder(this);
//		}
//	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.pathwayeditor.businessobjects.hibernate.pojos.HibFolder#getPath()
	 */
	public String getPath() {
		return "/";
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#isDescendent(org.pathwayeditor.businessobjects.repository.ISubFolder)
	 */
	public boolean isDescendent(ISubFolder subFolder) {
		// the root folder is the root of everything in the same repository
		return subFolder.getRepository().equals(this.getRepository());
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#canCopySubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder)
	 */
	public boolean canCopySubfolder(ISubFolder subFolder) {
		return subFolder != null && !subFolder.getParent().equals(this) && this.canUseSubfolderName(subFolder.getName());
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#canMoveSubfolder(org.pathwayeditor.businessobjects.repository.ISubFolder)
	 */
	public boolean canMoveSubfolder(ISubFolder subFolder) {
		return subFolder != null && !subFolder.getParent().equals(this) && this.canUseSubfolderName(subFolder.getName()) && this.getRepository().equals(subFolder.getRepository());
	}

	public String toString(){
		StringBuilder builder = new StringBuilder(this.getClass().getName());
		builder.append("(");
		builder.append("inode=");
		builder.append(this.getINode());
		builder.append(')');
		return builder.toString();
	}
}
