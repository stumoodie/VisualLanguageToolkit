package org.pathwayeditor.businessobjects.hibernate.pojos;
// Generated 07-May-2008 22:43:44 by Hibernate Tools 3.2.1.GA


import java.util.HashSet;
import java.util.Set;

/**
 * Folder generated by hbm2java
 */
public class Folder  implements java.io.Serializable {


     private Long id;
     private Set<MapDiagram> mapDiagrams = new HashSet<MapDiagram>(0);
     private Set<NonRootFolder> subFolders = new HashSet<NonRootFolder>(0);

    public Folder() {
    }

    public Folder(Set<MapDiagram> mapDiagrams, Set<NonRootFolder> subFolders) {
       this.mapDiagrams = mapDiagrams;
       this.subFolders = subFolders;
    }
   
    public Long getId() {
        return this.id;
    }
    
     void setId(Long id) {
        this.id = id;
    }
    public Set<MapDiagram> getMapDiagrams() {
        return this.mapDiagrams;
    }
    
     void setMapDiagrams(Set<MapDiagram> mapDiagrams) {
        this.mapDiagrams = mapDiagrams;
    }
    public Set<NonRootFolder> getSubFolders() {
        return this.subFolders;
    }
    
     void setSubFolders(Set<NonRootFolder> subFolders) {
        this.subFolders = subFolders;
    }

    /**
     * toString
     * @return String
     */
     public String toString() {
	  StringBuffer buffer = new StringBuffer();

      buffer.append(getClass().getName()).append("@").append(Integer.toHexString(hashCode())).append(" [");
      buffer.append("id").append("='").append(getId()).append("' ");			
      buffer.append("]");
      
      return buffer.toString();
     }


  // The following is extra code specified in the hbm.xml files

	private static final long serialVersionUID = 8668639813872187460L;

    public Folder(Folder other){
    	for(MapDiagram diagram : mapDiagrams){
    		this.mapDiagrams.add(new MapDiagram(this, diagram));
    	}
    	for(NonRootFolder subFolder : subFolders){
    		this.subFolders.add(new NonRootFolder(this, subFolder));
    	}
    }
    
    void addSubFolder(NonRootFolder newSubFolder){
    	 if(newSubFolder == null) throw new IllegalArgumentException("newSubFolder cannot be null");
    	 
    	 Folder oldParentFolder = newSubFolder.getParentFolder();
    	 if(oldParentFolder != null){
    		 oldParentFolder.subFolders.remove(newSubFolder);
    	 }
    	 this.subFolders.add(newSubFolder);
    	 newSubFolder.setParentFolder(this);
     }

     void removeSubFolder(NonRootFolder subFolder){
    	 if(subFolder == null) throw new IllegalArgumentException("subFolder cannot be null");
    	 if(subFolder.getParentFolder() != this) throw new IllegalArgumentException("subFolder must be a child of this folder");
    	 
    	 this.subFolders.remove(subFolder);
    	 subFolder.setParentFolder(null);
     }
   
    	
  // end of extra code specified in the hbm.xml files

}


