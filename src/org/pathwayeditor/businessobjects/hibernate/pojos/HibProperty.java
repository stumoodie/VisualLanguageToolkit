package org.pathwayeditor.businessobjects.hibernate.pojos;

import java.io.Serializable;

import org.pathwayeditor.businessobjects.drawingprimitives.IDrawingElement;
import org.pathwayeditor.businessobjects.drawingprimitives.ILabelAttribute;
import org.pathwayeditor.businessobjects.drawingprimitives.ILabelNode;
import org.pathwayeditor.businessobjects.drawingprimitives.ILabelNodeFactory;
import org.pathwayeditor.businessobjects.drawingprimitives.IModel;
import org.pathwayeditor.businessobjects.drawingprimitives.ISelectionFactory;
import org.pathwayeditor.businessobjects.drawingprimitives.attributes.Location;
import org.pathwayeditor.businessobjects.drawingprimitives.properties.IAnnotationProperty;
import org.pathwayeditor.businessobjects.drawingprimitives.properties.IPropertyDefinition;
import org.pathwayeditor.businessobjects.graphics.ILabelLocationPolicy;

/**
 * Property generated by hbm2java
 */
public abstract class HibProperty implements IAnnotationProperty, Serializable {
	private static final long serialVersionUID = -1996477907215294788L;

	private Long id = null;
	private String name;
	private HibLabelAttribute labelAttribute = null;
	private HibAnnotatedCanvasAttribute owner;

	/**
	 * Constructor should only be used by hiberate.
	 * @deprecated Application code should not use this constructor. Use one of the other constructors instead.
	 */
	protected HibProperty() {
	}

	protected HibProperty(HibAnnotatedCanvasAttribute owner, IPropertyDefinition propDefn) {
		this.owner = owner;
		this.name = propDefn.getName();
	}

	protected HibProperty(HibAnnotatedCanvasAttribute newOwner, HibProperty other) {
		this.owner = newOwner;
		this.name = other.name;
	}
	
	public Long getId() {
		return this.id;
	}

	@SuppressWarnings("unused")
	private void setId(Long id) {
		this.id = id;
	}

	public abstract void setPropertyDefinition(IPropertyDefinition definition);

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}
	
	public boolean isDisplayed() {
		return this.labelAttribute != null;
	}
	
	public void setDisplayed(boolean displayStatus) {
		if(!canVisualiseProperty()) throw new IllegalStateException("This property is not visualisable");

		if(displayStatus && this.labelAttribute == null) {
			createNewLabel();
		}
		else if(!displayStatus && this.labelAttribute != null){
			removeLabel();
		}
	}

	private void createNewLabel() {
		IDrawingElement owningElement = this.owner.getCurrentDrawingElement();
		// get new label location before add label as this may confuse calculations
		// since the algorithms may look at labels associated with the owning attribute
		Location newLabelLocation = this.getLabelLocationPolicy().nextLabelLocation();
		ILabelNodeFactory fact = owningElement.getLabelSubModel().labelNodeFactory();
		fact.setProperty(this);
		ILabelNode newLabelNode = fact.createLabel();
		ILabelAttribute newLabelAttribute = newLabelNode.getAttribute();
		newLabelAttribute.setLocation(newLabelLocation);
		this.labelAttribute = (HibLabelAttribute)newLabelNode.getAttribute();
	}
	
	private void removeLabel() {
		IModel model = this.labelAttribute.getCurrentDrawingElement().getModel();
		ISelectionFactory fact = model.newSelectionFactory();
		fact.addDrawingNode(this.labelAttribute.getCurrentDrawingElement());
		model.removeSubgraph(fact.createGeneralSelection());
		this.labelAttribute.setVisualisableProperty(null);
		this.labelAttribute = null;
	}
	
	void setOwner(HibAnnotatedCanvasAttribute owner) {
		this.owner = owner;
	}
	
	public HibAnnotatedCanvasAttribute getOwner() {
		return this.owner;
	}
	
	void setDisplayedLabel(HibLabelAttribute labelAttribute) {
		this.labelAttribute = labelAttribute;
	}
	
	public ILabelAttribute getDisplayedLabel() {
		return this.labelAttribute;
	}

	public ILabelLocationPolicy getLabelLocationPolicy(){
		if(!canVisualiseProperty()) throw new IllegalStateException("This property is not visualisable");

		return this.owner.getLabelLocationPolicy();
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
		result = prime * result + ((this.owner == null) ? 0 : this.owner.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (!(obj instanceof HibProperty))
			return false;
		HibProperty other = (HibProperty) obj;
		if (this.name == null) {
			if (other.name != null)
				return false;
		} else if (!this.name.equals(other.name))
			return false;
		if (this.owner == null) {
			if (other.owner != null)
				return false;
		} else if (!this.owner.equals(other.owner))
			return false;
		return true;
	}
}
