package org.pathwayeditor.businessobjects.hibernate.pojos;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.pathwayeditor.businessobjects.repository.IFolder;
import org.pathwayeditor.businessobjects.repository.IRepository;
import org.pathwayeditor.businessobjects.repository.IRootFolder;
import org.pathwayeditor.businessobjects.repository.ISubFolder;

/**
 * DataStore generated by hbm2java
 */
public class HibRepository implements Serializable, IRepository {
	/**
	 * 
	 */
	public static final String ILLEGAL_NAME = "Name of a respoitory must not be either null or empty String and must be unique";
	private static final long serialVersionUID = -841109914395755034L;
	public static final String ILLEGAL_DESCRIPTION = "Description of a repository cannot be null";
	public static final String ILLEGAL_ROOTFOLDER = "Root folder cannot be null";
	private static final String ILLEGAL_SUBFOLDERNAME = "Folder name cannot be null or empty String";
	private static final String PATH_DOES_NOT_EXIST = "This path does not exist in this repository";
	private Long id = null;
	private String name = null;
	private String description = null;
	private HibRootFolder rootFolder = null;
	private int buildNum;
     
	HibRepository(){
		this.rootFolder=new HibRootFolder();
	}

	public HibRepository(String name, String description, int buildNum ) {
		if(name==null||name.equals(""))
				throw new IllegalArgumentException(ILLEGAL_NAME);
		this.name = name;
		if(description==null)
			throw new IllegalArgumentException(ILLEGAL_DESCRIPTION);
		this.description = description;
		this.buildNum = buildNum;
		this.rootFolder=new HibRootFolder();
	}

   public void changeRootFolder(HibRootFolder newRootFolder){
	   HibRootFolder oldRootFolder = this.rootFolder;
	   this.rootFolder = newRootFolder;
	   if(oldRootFolder != null){
		   oldRootFolder.setOwningRepository(null);
	   }
	   if(this.rootFolder != null){
		   this.rootFolder.setOwningRepository(this);
	   }
   }
	
	public Long getId() {
		return this.id;
	}

	void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		if(name==null||name.equals(""))
			throw new IllegalArgumentException(ILLEGAL_NAME);
		this.name = name;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		if(description==null)
			throw new IllegalArgumentException(ILLEGAL_DESCRIPTION);
		this.description = description;
	}

	public HibRootFolder getHibRootFolder() {
		return this.rootFolder;
	}
	
	public IRootFolder getRootFolder() {
		if(this.rootFolder==null)
			throw new IllegalArgumentException(ILLEGAL_ROOTFOLDER);
		return rootFolder;
	}

	void setHibRootFolder(HibRootFolder hibRootFolder) {
		this.rootFolder = hibRootFolder;
	}

	/**
	 * toString
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer buffer = new StringBuffer();

		buffer.append(getClass().getName()).append("@").append(
				Integer.toHexString(hashCode())).append(" [");
		buffer.append("id").append("='").append(getId()).append("' ");
		buffer.append("name").append("='").append(getName()).append("' ");
		buffer.append("description").append("='").append(getDescription())
				.append("' ");
		buffer.append("]");

		return buffer.toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if ((other == null))
			return false;
		if (!(other instanceof HibRepository))
			return false;
		HibRepository castOther = (HibRepository) other;

		return ((this.getName() == castOther.getName()) || (this.getName() != null
				&& castOther.getName() != null && this.getName().equals(
				castOther.getName())));
	}

	public int hashCode() {
		int result = 17;

		result = 37 * result
				+ (getName() == null ? 0 : this.getName().hashCode());

		return result;
	}


     public IRepository getBusinessObject(){
//		if(this.businessObject == null){
//			this.businessObject = new Repository(this);
//		}
//		return this.businessObject;
    	 return this;
	}
	
	public void setBuildNum(int buildNum){
		this.buildNum = buildNum;
	}
	
	public int getBuildNum(){
		return this.buildNum;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.repository.IRepository#getSchemaBuildNum()
	 */
	public int getSchemaBuildNum() {
		return this.buildNum;
	}
	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.repository.IRepository#getFolderByPath(java.lang.String)
	 */
	public IFolder getFolderByPath(String path) {
	     if (!pathExists(path))
	    	 throw new IllegalArgumentException(PATH_DOES_NOT_EXIST);
	     return fetchFolder(rootFolder,path);
	}

	/**
	 * @param path
	 * @return
	 */
	private IFolder fetchFolder(HibFolder folder,String path) {
		if(folder.getPath().equals(path))
			return folder;
		Set<HibSubFolder>subs = folder.getSubFolders();
		for (HibSubFolder sub:subs){
			IFolder target =fetchFolder(sub, path); 
			if(target!=null){
				return target;
			}
		}
		return null;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.repository.IRepository#getFoldersByName(java.lang.String)
	 */
	public List<ISubFolder> getFoldersByName(String name) {
		if(name==null||name.equals(""))
			throw new IllegalArgumentException(ILLEGAL_SUBFOLDERNAME);
		List<ISubFolder> found = getChildrenOfFolderCalled(rootFolder,name);
		return found;
	}

	private List<ISubFolder> getChildrenOfFolderCalled(HibFolder folder , String name) {
		List <ISubFolder> found = new ArrayList<ISubFolder>();
		for (Iterator<? extends ISubFolder> it = folder.getSubFolderIterator(); it.hasNext();) {
			HibSubFolder sub = (HibSubFolder) it.next();
			if(sub.getName().equals(name))
				found.add(sub);
			found.addAll(getChildrenOfFolderCalled(sub, name));
		}
		return found;
	}

	/* (non-Javadoc)
	 * @see org.pathwayeditor.businessobjects.repository.IFolder#pathExists(java.lang.String)
	 */
	public boolean pathExists(String path) {
		if(fetchFolder(rootFolder,path)==null)
			return false;
		return true;
	}
}
